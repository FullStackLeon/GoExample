// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GoLib/GORM/model"
)

func newUser(db *gorm.DB, opts ...gen.DOOption) user {
	_user := user{}

	_user.userDo.UseDB(db, opts...)
	_user.userDo.UseModel(&model.User{})

	tableName := _user.userDo.TableName()
	_user.ALL = field.NewAsterisk(tableName)
	_user.UserID = field.NewInt32(tableName, "user_id")
	_user.Username = field.NewString(tableName, "username")
	_user.Email = field.NewString(tableName, "email")
	_user.Password = field.NewString(tableName, "password")
	_user.AccountType = field.NewString(tableName, "account_type")
	_user.AuthProvider = field.NewString(tableName, "auth_provider")
	_user.AuthUserID = field.NewString(tableName, "auth_user_id")
	_user.AuthAccessToken = field.NewString(tableName, "auth_access_token")
	_user.AuthRefreshToken = field.NewString(tableName, "auth_refresh_token")
	_user.AuthUserInfo = field.NewString(tableName, "auth_user_info")
	_user.Balance = field.NewFloat64(tableName, "balance")
	_user.Source = field.NewString(tableName, "source")
	_user.Status = field.NewString(tableName, "status")
	_user.GoogleAuthKey = field.NewString(tableName, "google_auth_key")
	_user.TwoFactorAuth = field.NewString(tableName, "two_factor_auth")
	_user.KycStatus = field.NewString(tableName, "kyc_status")
	_user.CreatedAt = field.NewTime(tableName, "created_at")
	_user.UpdatedAt = field.NewTime(tableName, "updated_at")
	_user.DeletedAt = field.NewField(tableName, "deleted_at")

	_user.fillFieldMap()

	return _user
}

type user struct {
	userDo userDo

	ALL              field.Asterisk
	UserID           field.Int32   // 用户ID，自增主键
	Username         field.String  // 用户名，不能为空
	Email            field.String  // 电子邮箱地址，唯一索引
	Password         field.String  // 加密后的密码，长度一般为哈希后的结果，不能为空
	AccountType      field.String  // 账号类型：普通用户、auth用户、管理员用户，默认为普通用户
	AuthProvider     field.String  // OAuth提供商名称，如Google、Twitter等
	AuthUserID       field.String  // 用户在OAuth提供商系统中的唯一标识符
	AuthAccessToken  field.String  // OAuth访问令牌
	AuthRefreshToken field.String  // OAuth刷新令牌
	AuthUserInfo     field.String  // OAuth提供商返回的用户信息，JSON格式
	Balance          field.Float64 // 用户余额，DECIMAL类型，精确到小数点后两位，默认为0.00
	Source           field.String  // 用户来源信息，如Twitter等平台
	Status           field.String  // 用户状态，active为激活状态，inactive为未激活状态，frozen为已冻结状态，suspended为已暂停状态，deleted为已删除状态，默认为active
	GoogleAuthKey    field.String  // 用户Google Authenticator的密钥
	TwoFactorAuth    field.String  // 用户两步验证状态，enabled为已启用，disabled为已禁用，默认为disabled
	KycStatus        field.String  // KYC（Know Your Customer）状态，pending为待审核，approved为已审核通过，rejected为审核未通过，默认为pending
	CreatedAt        field.Time    // 记录创建时间，默认为当前时间
	UpdatedAt        field.Time    // 记录更新时间，默认为当前时间，自动更新
	DeletedAt        field.Field   // 记录删除时间，用于软删除，为空表示未删除

	fieldMap map[string]field.Expr
}

func (u user) Table(newTableName string) *user {
	u.userDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u user) As(alias string) *user {
	u.userDo.DO = *(u.userDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *user) updateTableName(table string) *user {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt32(table, "user_id")
	u.Username = field.NewString(table, "username")
	u.Email = field.NewString(table, "email")
	u.Password = field.NewString(table, "password")
	u.AccountType = field.NewString(table, "account_type")
	u.AuthProvider = field.NewString(table, "auth_provider")
	u.AuthUserID = field.NewString(table, "auth_user_id")
	u.AuthAccessToken = field.NewString(table, "auth_access_token")
	u.AuthRefreshToken = field.NewString(table, "auth_refresh_token")
	u.AuthUserInfo = field.NewString(table, "auth_user_info")
	u.Balance = field.NewFloat64(table, "balance")
	u.Source = field.NewString(table, "source")
	u.Status = field.NewString(table, "status")
	u.GoogleAuthKey = field.NewString(table, "google_auth_key")
	u.TwoFactorAuth = field.NewString(table, "two_factor_auth")
	u.KycStatus = field.NewString(table, "kyc_status")
	u.CreatedAt = field.NewTime(table, "created_at")
	u.UpdatedAt = field.NewTime(table, "updated_at")
	u.DeletedAt = field.NewField(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *user) WithContext(ctx context.Context) *userDo { return u.userDo.WithContext(ctx) }

func (u user) TableName() string { return u.userDo.TableName() }

func (u user) Alias() string { return u.userDo.Alias() }

func (u user) Columns(cols ...field.Expr) gen.Columns { return u.userDo.Columns(cols...) }

func (u *user) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *user) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 19)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["username"] = u.Username
	u.fieldMap["email"] = u.Email
	u.fieldMap["password"] = u.Password
	u.fieldMap["account_type"] = u.AccountType
	u.fieldMap["auth_provider"] = u.AuthProvider
	u.fieldMap["auth_user_id"] = u.AuthUserID
	u.fieldMap["auth_access_token"] = u.AuthAccessToken
	u.fieldMap["auth_refresh_token"] = u.AuthRefreshToken
	u.fieldMap["auth_user_info"] = u.AuthUserInfo
	u.fieldMap["balance"] = u.Balance
	u.fieldMap["source"] = u.Source
	u.fieldMap["status"] = u.Status
	u.fieldMap["google_auth_key"] = u.GoogleAuthKey
	u.fieldMap["two_factor_auth"] = u.TwoFactorAuth
	u.fieldMap["kyc_status"] = u.KycStatus
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u user) clone(db *gorm.DB) user {
	u.userDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u user) replaceDB(db *gorm.DB) user {
	u.userDo.ReplaceDB(db)
	return u
}

type userDo struct{ gen.DO }

func (u userDo) Debug() *userDo {
	return u.withDO(u.DO.Debug())
}

func (u userDo) WithContext(ctx context.Context) *userDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDo) ReadDB() *userDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDo) WriteDB() *userDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDo) Session(config *gorm.Session) *userDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDo) Clauses(conds ...clause.Expression) *userDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDo) Returning(value interface{}, columns ...string) *userDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDo) Not(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDo) Or(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDo) Select(conds ...field.Expr) *userDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDo) Where(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDo) Order(conds ...field.Expr) *userDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDo) Distinct(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDo) Omit(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDo) Join(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDo) Group(cols ...field.Expr) *userDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDo) Having(conds ...gen.Condition) *userDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDo) Limit(limit int) *userDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDo) Offset(offset int) *userDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDo) Unscoped() *userDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDo) Create(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDo) CreateInBatches(values []*model.User, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDo) Save(values ...*model.User) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDo) First() (*model.User, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Take() (*model.User, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Last() (*model.User, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) Find() ([]*model.User, error) {
	result, err := u.DO.Find()
	return result.([]*model.User), err
}

func (u userDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.User, err error) {
	buf := make([]*model.User, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDo) FindInBatches(result *[]*model.User, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDo) Attrs(attrs ...field.AssignExpr) *userDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDo) Assign(attrs ...field.AssignExpr) *userDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDo) Joins(fields ...field.RelationField) *userDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDo) Preload(fields ...field.RelationField) *userDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDo) FirstOrInit() (*model.User, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FirstOrCreate() (*model.User, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.User), nil
	}
}

func (u userDo) FindByPage(offset int, limit int) (result []*model.User, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDo) Delete(models ...*model.User) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDo) withDO(do gen.Dao) *userDo {
	u.DO = *do.(*gen.DO)
	return u
}
