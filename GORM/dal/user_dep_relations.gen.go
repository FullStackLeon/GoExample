// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"GoLib/GORM/model"
)

func newUserDepRelation(db *gorm.DB, opts ...gen.DOOption) userDepRelation {
	_userDepRelation := userDepRelation{}

	_userDepRelation.userDepRelationDo.UseDB(db, opts...)
	_userDepRelation.userDepRelationDo.UseModel(&model.UserDepRelation{})

	tableName := _userDepRelation.userDepRelationDo.TableName()
	_userDepRelation.ALL = field.NewAsterisk(tableName)
	_userDepRelation.UserID = field.NewInt32(tableName, "user_id")
	_userDepRelation.DepID = field.NewInt32(tableName, "dep_id")

	_userDepRelation.fillFieldMap()

	return _userDepRelation
}

// userDepRelation 用户和部门关系表
type userDepRelation struct {
	userDepRelationDo userDepRelationDo

	ALL    field.Asterisk
	UserID field.Int32 // 用户ID
	DepID  field.Int32 // 部门ID

	fieldMap map[string]field.Expr
}

func (u userDepRelation) Table(newTableName string) *userDepRelation {
	u.userDepRelationDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userDepRelation) As(alias string) *userDepRelation {
	u.userDepRelationDo.DO = *(u.userDepRelationDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userDepRelation) updateTableName(table string) *userDepRelation {
	u.ALL = field.NewAsterisk(table)
	u.UserID = field.NewInt32(table, "user_id")
	u.DepID = field.NewInt32(table, "dep_id")

	u.fillFieldMap()

	return u
}

func (u *userDepRelation) WithContext(ctx context.Context) *userDepRelationDo {
	return u.userDepRelationDo.WithContext(ctx)
}

func (u userDepRelation) TableName() string { return u.userDepRelationDo.TableName() }

func (u userDepRelation) Alias() string { return u.userDepRelationDo.Alias() }

func (u userDepRelation) Columns(cols ...field.Expr) gen.Columns {
	return u.userDepRelationDo.Columns(cols...)
}

func (u *userDepRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userDepRelation) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 2)
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["dep_id"] = u.DepID
}

func (u userDepRelation) clone(db *gorm.DB) userDepRelation {
	u.userDepRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userDepRelation) replaceDB(db *gorm.DB) userDepRelation {
	u.userDepRelationDo.ReplaceDB(db)
	return u
}

type userDepRelationDo struct{ gen.DO }

func (u userDepRelationDo) Debug() *userDepRelationDo {
	return u.withDO(u.DO.Debug())
}

func (u userDepRelationDo) WithContext(ctx context.Context) *userDepRelationDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userDepRelationDo) ReadDB() *userDepRelationDo {
	return u.Clauses(dbresolver.Read)
}

func (u userDepRelationDo) WriteDB() *userDepRelationDo {
	return u.Clauses(dbresolver.Write)
}

func (u userDepRelationDo) Session(config *gorm.Session) *userDepRelationDo {
	return u.withDO(u.DO.Session(config))
}

func (u userDepRelationDo) Clauses(conds ...clause.Expression) *userDepRelationDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userDepRelationDo) Returning(value interface{}, columns ...string) *userDepRelationDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userDepRelationDo) Not(conds ...gen.Condition) *userDepRelationDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userDepRelationDo) Or(conds ...gen.Condition) *userDepRelationDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userDepRelationDo) Select(conds ...field.Expr) *userDepRelationDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userDepRelationDo) Where(conds ...gen.Condition) *userDepRelationDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userDepRelationDo) Order(conds ...field.Expr) *userDepRelationDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userDepRelationDo) Distinct(cols ...field.Expr) *userDepRelationDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userDepRelationDo) Omit(cols ...field.Expr) *userDepRelationDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userDepRelationDo) Join(table schema.Tabler, on ...field.Expr) *userDepRelationDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userDepRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userDepRelationDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userDepRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) *userDepRelationDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userDepRelationDo) Group(cols ...field.Expr) *userDepRelationDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userDepRelationDo) Having(conds ...gen.Condition) *userDepRelationDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userDepRelationDo) Limit(limit int) *userDepRelationDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userDepRelationDo) Offset(offset int) *userDepRelationDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userDepRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userDepRelationDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userDepRelationDo) Unscoped() *userDepRelationDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userDepRelationDo) Create(values ...*model.UserDepRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userDepRelationDo) CreateInBatches(values []*model.UserDepRelation, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userDepRelationDo) Save(values ...*model.UserDepRelation) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userDepRelationDo) First() (*model.UserDepRelation, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDepRelation), nil
	}
}

func (u userDepRelationDo) Take() (*model.UserDepRelation, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDepRelation), nil
	}
}

func (u userDepRelationDo) Last() (*model.UserDepRelation, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDepRelation), nil
	}
}

func (u userDepRelationDo) Find() ([]*model.UserDepRelation, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserDepRelation), err
}

func (u userDepRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserDepRelation, err error) {
	buf := make([]*model.UserDepRelation, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userDepRelationDo) FindInBatches(result *[]*model.UserDepRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userDepRelationDo) Attrs(attrs ...field.AssignExpr) *userDepRelationDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userDepRelationDo) Assign(attrs ...field.AssignExpr) *userDepRelationDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userDepRelationDo) Joins(fields ...field.RelationField) *userDepRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userDepRelationDo) Preload(fields ...field.RelationField) *userDepRelationDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userDepRelationDo) FirstOrInit() (*model.UserDepRelation, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDepRelation), nil
	}
}

func (u userDepRelationDo) FirstOrCreate() (*model.UserDepRelation, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserDepRelation), nil
	}
}

func (u userDepRelationDo) FindByPage(offset int, limit int) (result []*model.UserDepRelation, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userDepRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userDepRelationDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userDepRelationDo) Delete(models ...*model.UserDepRelation) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userDepRelationDo) withDO(do gen.Dao) *userDepRelationDo {
	u.DO = *do.(*gen.DO)
	return u
}
